{"version":3,"sources":["components/DateRange/DateRange.tsx","containers/MainContainer/Sidebar/Sidebar.tsx","data/carData.d.ts","components/Car/Car.tsx","containers/MainContainer/MainContainer.tsx","containers/Navbar/Navbar.tsx","App/App.tsx","serviceWorker.js","index.tsx"],"names":["DateRange","props","handleYearChange","e","targetSelect","target","minYear","state","selectedMinYear","maxYear","selectedMaxYear","name","value","setState","setMaxYearsRange","YearChanged","minYears","maxYears","minimumYear","year","this","maximumYear","push","filter","y","yearsArr","map","key","id","toString","className","title","minTitle","onChange","printYears","maxTitle","Component","Sidebar","rangeYearChangedHandler","console","log","CarData","getCars","cb","fetch","then","response","json","data","catch","err","Car","car","src","image","alt","manufacturer","model","color","gear","engineVolume","marketingYears","from","to","MainContainer","printCars","cars","c","Navbar","menuItems","m","App","menus","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2YAKqBA,G,kBAInB,WAAYC,GAAyB,IAAD,8BAClC,4CAAMA,KAkCRC,iBAAmB,SAACC,GAClB,IAAIC,EAAoBD,EAAEE,OACtBC,EAAkB,EAAKC,MAAMC,gBAC7BC,EAAkB,EAAKF,MAAMG,gBACP,QAAtBN,EAAaO,KACfL,EAAUF,EAAaQ,MAEvBH,EAAUL,EAAaQ,MAErBN,EAAUG,IACZA,EAAUH,GAGZ,EAAKO,SACH,CAAEL,gBAAiBF,EAASI,gBAAiBD,IAC7C,WACE,EAAKK,iBAAiBR,GACtB,EAAKL,MAAMc,YACT,EAAKR,MAAMC,gBACX,EAAKD,MAAMG,qBApDjB,EAAKH,MAAQ,CACXS,SAAU,GACVC,SAAU,GACVT,gBAAiB,EAAKP,MAAMiB,YAC5BR,gBAAiB,EAAKT,MAAMiB,aANI,E,iFAWlC,IACE,IAAIC,EAAOC,KAAKnB,MAAMiB,YACtBC,GAAQC,KAAKnB,MAAMoB,YACnBF,IAEAC,KAAKb,MAAMS,SAASM,KAAKH,GAE3BC,KAAKN,iBAAiBM,KAAKb,MAAMC,mB,uCAGlBW,GACfC,KAAKP,SAAS,CACZI,SAAU,YAAIG,KAAKb,MAAMS,UAAUO,QAAO,SAAAC,GAAC,OAAIA,GAAKL,S,iCAI7CM,GACT,OAAOA,EAASC,KAAI,SAAAF,GAAC,OACnB,4BAAQG,IAAKH,EAAGI,GAAIJ,EAAEK,YACnBL,Q,+BA+BL,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,SAASV,KAAKnB,MAAM8B,OACnC,yBAAKD,UAAU,UACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SAASV,KAAKnB,MAAM+B,UACnC,6BACE,4BACErB,KAAK,MACLmB,UAAU,QACVG,SAAUb,KAAKlB,kBAEdkB,KAAKc,WAAWd,KAAKb,MAAMS,YAGhC,yBAAKc,UAAU,cACb,yBAAKA,UAAU,SAASV,KAAKnB,MAAMkC,UACnC,6BACE,4BACExB,KAAK,MACLmB,UAAU,QACVG,SAAUb,KAAKlB,kBAEdkB,KAAKc,WAAWd,KAAKb,MAAMU,oB,GAxFPmB,cCsCxBC,E,2MAvCb9B,MAAQ,G,EAER+B,wBAA0B,SACxBpB,EACAG,GAEAkB,QAAQC,IAAI,gBAAiBtB,GAC7BqB,QAAQC,IAAI,gBAAiBnB,I,wEAI7B,OACE,yBAAKS,UAAU,mBACb,yBAAKA,UAAU,iBACb,gHAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEC,MAAM,0DACNb,YAAa,KACbG,YAAa,KACbW,SAAS,2BACTG,SAAS,kCACTpB,YAAaK,KAAKkB,0BAEV,kBAAC,EAAD,CACRP,MAAM,0DACNb,YAAa,KACbG,YAAa,KACbW,SAAS,2BACTG,SAAS,kCACTpB,YAAaK,KAAKkB,gC,GAhCRF,aCHTK,EAAb,kCAAaA,EACGC,QAAU,SAACC,GAEvBC,MAAM,yBAAyBC,MAAK,SAAAC,GAClC,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACNL,EAAGK,MACFC,OAAM,SAAAC,Q,UCDQC,E,iLACT,IACAC,EAAQhC,KAAKnB,MAAbmD,IACR,OACE,yBAAKtB,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKuB,IAAKD,EAAIE,MAAOxB,UAAU,UAAUyB,IAAKH,EAAII,gBAEpD,yBAAK1B,UAAU,WACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,OAAhB,6BACCsB,EAAII,cAEP,yBAAK1B,UAAU,UACb,0BAAMA,UAAU,OAAhB,uBACCsB,EAAIK,OAEP,yBAAK3B,UAAU,UACb,0BAAMA,UAAU,OAAhB,wBACCsB,EAAIjC,MAEP,yBAAKW,UAAU,UACb,0BAAMA,UAAU,OAAhB,wBACCsB,EAAIM,OAEP,yBAAK5B,UAAU,UACb,0BAAMA,UAAU,OAAhB,wBACCsB,EAAIO,MAEP,yBAAK7B,UAAU,UACb,0BAAMA,UAAU,OAAhB,iDACCsB,EAAIQ,cAEP,yBAAK9B,UAAU,UACb,0BAAMA,UAAU,OAAhB,6DACCsB,EAAIS,eAAeC,KAFtB,IAE6BV,EAAIS,eAAeE,U,GAnCzB3B,aCIZ4B,E,YAInB,WAAY/D,GAA6B,IAAD,8BACtC,4CAAMA,KAsBRgE,UAAY,WACV,OAAO,EAAK1D,MAAM2D,KAAKxC,KAAI,SAAAyC,GACzB,OAAO,kBAAC,EAAD,CAAKxC,IAAKwC,EAAEvC,GAAIwB,IAAKe,QAvB9B,EAAK5D,MAAQ,CACX2D,KAAM,IAH8B,E,sEAQtC,OACE,yBAAKpC,UAAU,WACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,4BAAKV,KAAKnB,MAAM8B,QAElB,yBAAKD,UAAU,gBAAgBV,KAAK6C,iB,0CAYvB,IAAD,OAClBxB,EAAQC,SAAQ,SAACM,GACf,EAAKnC,SAAS,CAAEqD,KAAMlB,W,GAnCeZ,aCJtBgC,G,kBACnB,WAAYnE,GAAsB,IAAD,8BAC/B,4CAAMA,KACDM,MAAQ,CACX8D,UAAW,IAHkB,E,sEAQ/B,OACE,yBAAKvC,UAAU,6BACb,4BACGV,KAAKnB,MAAMoE,UAAU3C,KAAI,SAAA4C,GAAC,OACzB,wBAAI3C,IAAK2C,EAAE1C,GAAIE,UAAU,eACtBwC,EAAEvC,gB,GAdmBK,cCmBrBmC,E,2MAhBbhE,MAAQ,CACNwB,MAAO,+FACPyC,MAAO,CACL,CAAE5C,GAAI,EAAGjB,KAAM,SAAUoB,MAAO,kCAChC,CAAEH,GAAI,EAAGjB,KAAM,SAAUoB,MAAO,oC,wEAIlC,OACE,kBAAC,IAAM0C,SAAP,KACE,kBAAC,EAAD,CAAQJ,UAAWjD,KAAKb,MAAMiE,QAC9B,kBAAC,EAAD,CAAezC,MAAOX,KAAKb,MAAMwB,a,GAZvBK,aCIEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.5eb39c7f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { IDateRangeProps } from \"./IDateRangeProps\";\r\nimport \"./DateRange.scss\";\r\nimport { IDateRangeState } from \"./IDateRangeState\";\r\n\r\nexport default class DateRange extends Component<\r\n  IDateRangeProps,\r\n  IDateRangeState\r\n> {\r\n  constructor(props: IDateRangeProps) {\r\n    super(props);\r\n    this.state = {\r\n      minYears: [],\r\n      maxYears: [],\r\n      selectedMinYear: this.props.minimumYear,\r\n      selectedMaxYear: this.props.minimumYear\r\n    };\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    for (\r\n      let year = this.props.minimumYear;\r\n      year <= this.props.maximumYear;\r\n      year++\r\n    ) {\r\n      this.state.minYears.push(year);\r\n    }\r\n    this.setMaxYearsRange(this.state.selectedMinYear);\r\n  }\r\n\r\n  setMaxYearsRange(year: number): void {\r\n    this.setState({\r\n      maxYears: [...this.state.minYears].filter(y => y >= year)\r\n    });\r\n  }\r\n\r\n  printYears(yearsArr: number[]): JSX.Element[] {\r\n    return yearsArr.map(y => (\r\n      <option key={y} id={y.toString()}>\r\n        {y}\r\n      </option>\r\n    ));\r\n  }\r\n\r\n  handleYearChange = (e: any): void => {\r\n    let targetSelect: any = e.target;\r\n    let minYear: number = this.state.selectedMinYear;\r\n    let maxYear: number = this.state.selectedMaxYear;\r\n    if (targetSelect.name === \"min\") {\r\n      minYear = targetSelect.value;\r\n    } else {\r\n      maxYear = targetSelect.value;\r\n    }\r\n    if (minYear > maxYear) {\r\n      maxYear = minYear;\r\n    }\r\n\r\n    this.setState(\r\n      { selectedMinYear: minYear, selectedMaxYear: maxYear },\r\n      () => {\r\n        this.setMaxYearsRange(minYear);\r\n        this.props.YearChanged(\r\n          this.state.selectedMinYear,\r\n          this.state.selectedMaxYear\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dateRangeWrapper\">\r\n        <div className=\"title\">{this.props.title}</div>\r\n        <div className=\"fields\">\r\n          <div className=\"field-item\">\r\n            <div className=\"title\">{this.props.minTitle}</div>\r\n            <div>\r\n              <select\r\n                name=\"min\"\r\n                className=\"field\"\r\n                onChange={this.handleYearChange}\r\n              >\r\n                {this.printYears(this.state.minYears)}\r\n              </select>\r\n            </div>\r\n            <div className=\"field-item\">\r\n              <div className=\"title\">{this.props.maxTitle}</div>\r\n              <div>\r\n                <select\r\n                  name=\"max\"\r\n                  className=\"field\"\r\n                  onChange={this.handleYearChange}\r\n                >\r\n                  {this.printYears(this.state.maxYears)}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Sidebar.scss\";\r\nimport DateRange from \"src/components/DateRange/DateRange\";\r\nclass Sidebar extends Component {\r\n  state = {};\r\n\r\n  rangeYearChangedHandler = (\r\n    minimumYear: number,\r\n    maximumYear: number\r\n  ): void => {\r\n    console.log(\"minimum year:\", minimumYear);\r\n    console.log(\"maximum year:\", maximumYear);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar-wrapper\">\r\n        <div className=\"sidebar-title\">\r\n          <h2>אפשרויות חיפוש</h2>\r\n        </div>\r\n        <div className=\"dateRange\">\r\n          <DateRange\r\n            title=\"שנות שיווק\"\r\n            minimumYear={1900}\r\n            maximumYear={2019}\r\n            minTitle=\"משנה\"\r\n            maxTitle=\"עד שנה\"\r\n            YearChanged={this.rangeYearChangedHandler}\r\n          />\r\n                    <DateRange\r\n            title=\"שנות ייצור\"\r\n            minimumYear={1900}\r\n            maximumYear={2019}\r\n            minTitle=\"משנה\"\r\n            maxTitle=\"עד שנה\"\r\n            YearChanged={this.rangeYearChangedHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","export class CarData {\r\n  public static getCars = (cb: any): void => {\r\n\r\n    fetch('./assets/carData.json').then(response => {\r\n      return response.json();\r\n    }).then(data => {\r\n      cb(data);\r\n    }).catch(err => {\r\n      // Do something for an error here\r\n    });\r\n  };\r\n}\r\n","// @flow\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./Car.scss\";\r\nimport { ICarProps } from \"./ICarProps\";\r\n\r\nexport default class Car extends Component<ICarProps> {\r\n  render() {\r\n    const { car } = this.props;\r\n    return (\r\n      <div className=\"car-item\">\r\n        <div className=\"img\">\r\n          <img src={car.image} className=\"img-dim\" alt={car.manufacturer} />\r\n        </div>\r\n        <div className=\"details\">\r\n          <div className=\"detail\">\r\n            <span className=\"key\">יצרן:</span>\r\n            {car.manufacturer}\r\n          </div>\r\n          <div className=\"detail\">\r\n            <span className=\"key\">דגם:</span>\r\n            {car.model}\r\n          </div>\r\n          <div className=\"detail\">\r\n            <span className=\"key\">שנה: </span>\r\n            {car.year}\r\n          </div>\r\n          <div className=\"detail\">\r\n            <span className=\"key\">צבע: </span>\r\n            {car.color}\r\n          </div>\r\n          <div className=\"detail\">\r\n            <span className=\"key\">גיר: </span>\r\n            {car.gear}\r\n          </div>\r\n          <div className=\"detail\">\r\n            <span className=\"key\">נפח מנוע: </span>\r\n            {car.engineVolume}\r\n          </div>\r\n          <div className=\"detail\">\r\n            <span className=\"key\">שנות שיווק: </span>\r\n            {car.marketingYears.from}-{car.marketingYears.to}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// @flow\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./MainContainer.scss\";\r\nimport Sidebar from \"./Sidebar/Sidebar\";\r\nimport { IMainContainerState } from \"src/containers/MainContainer/IMainContainerState\";\r\nimport { IMainContainerProps } from \"src/containers/MainContainer/IMainContainerProps\";\r\nimport { CarData } from \"src/data/carData.d\";\r\nimport Car from \"src/components/Car/Car\";\r\nimport { ICar } from \"src/types/ICar\";\r\nexport default class MainContainer extends Component<\r\n  IMainContainerProps,\r\n  IMainContainerState\r\n> {\r\n  constructor(props: IMainContainerProps) {\r\n    super(props);\r\n    this.state = {\r\n      cars: []\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"sidebar\">\r\n          <Sidebar />\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"title\">\r\n            <h1>{this.props.title}</h1>\r\n          </div>\r\n          <div className=\"main-content\">{this.printCars()}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  printCars = (): JSX.Element[] => {\r\n    return this.state.cars.map(c => {\r\n      return <Car key={c.id} car={c} />;\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    CarData.getCars((data: ICar[]) => {\r\n      this.setState({ cars: data });\r\n    });\r\n  }\r\n}\r\n","// @flow\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./Navbar.scss\";\r\nimport { INavbarProps } from \"./INavbarProps\";\r\n\r\nexport default class Navbar extends Component<INavbarProps> {\r\n  constructor(props: INavbarProps) {\r\n    super(props);\r\n    this.state = {\r\n      menuItems: []\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"flexCenter navbar-wrapper\">\r\n        <ul>\r\n          {this.props.menuItems.map(m => (\r\n            <li key={m.id} className=\"inline-item\">\r\n              {m.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// @flow\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport MainContainer from \"src/containers/MainContainer/MainContainer\";\r\nimport Navbar from \"src/containers/Navbar/Navbar\";\r\nimport { IAppProps } from \"./IAppProps\";\r\nimport { IAppState } from \"./IAppState\";\r\nclass App extends Component<IAppProps, IAppState> {\r\n  state = {\r\n    title: \"חיפוש רכבי אספנות\",\r\n    menus: [\r\n      { id: 1, name: \"create\", title: \"הוספה\" },\r\n      { id: 2, name: \"search\", title: \"חיפוש\" }\r\n    ]\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar menuItems={this.state.menus} />\r\n        <MainContainer title={this.state.title} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}